name: Continuous Integration

on:
  push:
    branches: ['**']
    tags: ['**']

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout current branch (full)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install node 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Installing
        run: pnpm install

      - name: Building
        run: pnpm build

      - name: Testing
        run: pnpm test

  publish:
    name: Publish ${{ matrix.image_name }}
    needs: [build]
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        include:
          - image_name: dtd-catalog-exporter
            package_path: ./jobs/dtd-catalog-exporter
          - image_name: one-trust-notices
            package_path: ./jobs/one-trust-notices
          - image_name: registered-comuni-pn
            package_path: ./jobs/registered-comuni-pn

    permissions:
      id-token: write
      contents: read


    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/1.0.x' || startsWith(github.ref, 'refs/tags/'))
    steps:
      - name: Checkout current branch (full)
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  
        
      - name: Install node 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Installing
        run: pnpm install

      - name: Building job
        run: pnpm build:${{ matrix.image_name }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-central-1
          role-to-assume: 'arn:aws:iam::505630707203:role/interop-github-ecr-dev'
          role-session-name: interop-be-${{ matrix.image_name }}-${{ github.job }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Calculating image version
        id: version
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/"* ]]; then
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "1.0.x" ]]; then
            echo "version=${{ github.ref_name }}-latest" >> $GITHUB_OUTPUT
          else
            echo "version=$(echo "$GITHUB_REF_NAME" | tr -s "/" "-")" >> $GITHUB_OUTPUT
          fi
          
      - name: Build docker image
        run: docker build --network host -t $ECR_REGISTRY/interop-be-${{ matrix.image_name }}:$VERSION .
        working-directory: ${{ matrix.package_path }}          
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          VERSION: ${{ steps.version.outputs.version }}

      - name: Push image to Amazon ECR
        run: docker push $ECR_REGISTRY/interop-be-${{ matrix.image_name }}:$VERSION
        working-directory: ${{ matrix.package_path }}          
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          VERSION: ${{ steps.version.outputs.version }}
    